/**
 * @fileOverview Firestore Security Rules for ABG Insights Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user can only access their own profile and ABG analyses.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the user themselves can read or write their profile.
 * - /users/{userId}/abg_analyses/{abgAnalysisId}: Stores ABG analysis data for a specific user. Only the owning user can create, read, update, or delete their analyses.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - ABG analyses are owned by the user who created them.
 * - No public data or shared access is allowed in this initial prototype.
 * - Data validation is relaxed for rapid prototyping, focusing on ownership and relationship integrity.
 *
 * Denormalization for Authorization:
 * - The `/users/{userId}/abg_analyses/{abgAnalysisId}` path inherently denormalizes the `userId` relationship. This allows direct enforcement of ownership without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles. Only the authenticated user can access their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) - User with UID 'user_abc' can read/write their profile at /users/user_abc.
     * @allow (create) - User with UID 'user_abc' can create their profile at /users/user_abc.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot read/write the profile at /users/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow anyone to read profiles.
      allow get: if isOwner(userId);
      allow list: if false;

      // Allow users to create their own profile if the userId matches their auth.uid
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow updates and deletes only if the user is the owner and the profile already exists.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
    }

    /**
     * @description Enforces access control for ABG analysis data. Only the owner of the analysis can access it.
     * @path /users/{userId}/abg_analyses/{abgAnalysisId}
     * @allow (create, get, update, delete, list) - User 'user_abc' can create/read/write/list their ABG analyses under /users/user_abc/abg_analyses/{abgAnalysisId}.
     * @deny (create, get, update, delete, list) - User 'user_xyz' cannot access ABG analyses under /users/user_abc/abg_analyses/{abgAnalysisId}.
     * @principle Enforces strict document ownership for all data access and modifications.
     */
    match /users/{userId}/abg_analyses/{abgAnalysisId} {
      // Helper function to check if the authenticated user is the owner (same as parent user ID).
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow reads for the owner only.
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Allow creation, updates, and deletes for the owner only.
      allow create: if isOwner(userId) && request.resource.data.userId == userId; // Validate path consistency
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId; // Enforce userId immutability
      allow delete: if isExistingOwner(userId);

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
    }
  }
}